{
  "name": "Delete Participant Details - [seq-acct-lookup-del-participants-7.1.2]",
  "inputValues": {
    "BASE_CENTRAL_LEDGER_ADMIN": "",
    "CALLBACK_ENDPOINT_BASE_URL": "http://dev-testing-toolkit-specapi.mojaloop.live",
    "HOST_ACCOUNT_LOOKUP_SERVICE": "http://dev1-account-lookup.mojaloop.live",
    "HOST_BULK_ADAPTER": "http://dev1-bulk-api-adapter.mojaloop.live",
    "HOST_CENTRAL_LEDGER": "http://dev1-central-ledger.mojaloop.live",
    "HOST_CENTRAL_SETTLEMENT": "http://dev1-central-settlement.mojaloop.live/v1",
    "HOST_LEGACY_SIMULATOR": "http://dev1-simulator.mojaloop.live",
    "HOST_ML_API_ADAPTER": "http://dev1-ml-api-adapter.mojaloop.live",
    "HOST_QUOTING_SERVICE": "http://dev1-quoting-service.mojaloop.live",
    "HOST_SIMULATOR": "http://dev1-simulator.mojaloop.live",
    "HOST_TRANSACTION_REQUESTS_SERVICE": "http://dev1-transaction-requests-service.mojaloop.live",
    "HUB_OPERATOR_BEARER_TOKEN": "NOT_APPLICABLE",
    "PAYEEFSP_BACKEND_TESTAPI_URL": "http://dev1-sim-payeefsp.mojaloop.live/sim/payeefsp/test",
    "PAYEEFSP_SDK_TESTAPI_URL": "http://dev1-sim-payeefsp.mojaloop.live/sim/payeefsp/sdktest",
    "PAYERFSP_BACKEND_TESTAPI_URL": "http://dev1-sim-payerfsp.mojaloop.live/sim/payerfsp/test",
    "PAYERFSP_SDK_TESTAPI_URL": "http://dev1-sim-payerfsp.mojaloop.live/sim/payerfsp/sdktest",
    "accept": "application/vnd.interoperability.parties+json;version=1.0",
    "acceptQuotes": "application/vnd.interoperability.quotes+json;version=1.0",
    "acceptTransfers": "application/vnd.interoperability.transfers+json;version=1.0",
    "amount": "100",
    "condition": "n2cwS3w4ekGlvNYoXg2uBAqssu3FCoXjADE2mziU5jU",
    "contentTransfers": "application/vnd.interoperability.transfers+json;version=1.0",
    "contentType": "application/vnd.interoperability.parties+json;version=1.0",
    "contentTypeQuotes": "application/vnd.interoperability.quotes+json;version=1.0",
    "currency": "{$inputs.currency}",
    "currency2": "{$inputs.currency}",
    "fromDOB": "1984-01-01",
    "fromFirstName": "Firstname-Test",
    "fromFspId": "testingtoolkitdfsp",
    "fromIdType": "MSISDN",
    "fromIdValue": "44123456789",
    "fromLastName": "Lastname-Test",
    "fspiopSignature": "{\"signature\":\"iU4GBXSfY8twZMj1zXX1CTe3LDO8Zvgui53icrriBxCUF_wltQmnjgWLWI4ZUEueVeOeTbDPBZazpBWYvBYpl5WJSUoXi14nVlangcsmu2vYkQUPmHtjOW-yb2ng6_aPfwd7oHLWrWzcsjTF-S4dW7GZRPHEbY_qCOhEwmmMOnE1FWF1OLvP0dM0r4y7FlnrZNhmuVIFhk_pMbEC44rtQmMFv4pm4EVGqmIm3eyXz0GkX8q_O1kGBoyIeV_P6RRcZ0nL6YUVMhPFSLJo6CIhL2zPm54Qdl2nVzDFWn_shVyV0Cl5vpcMJxJ--O_Zcbmpv6lxqDdygTC782Ob3CNMvg\\\",\\\"protectedHeader\\\":\\\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvdHJhbnNmZXJzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJPTUwiLCJGU1BJT1AtRGVzdGluYXRpb24iOiJNVE5Nb2JpbGVNb25leSIsIkRhdGUiOiIifQ\"}",
    "homeTransactionId": "123ABC",
    "hub_operator": "NOT_APPLICABLE",
    "ilpPacket": "AYIDBQAAAAAAACcQJGcucGF5ZWVmc3AubXNpc2RuLnt7cmVjZWl2ZXJtc2lzZG59fYIC1GV5SjBjbUZ1YzJGamRHbHZia2xrSWpvaVptVXhNREU0Wm1NdE1EaGxZeTAwWWpJM0xUbGpZalF0TnpjMk9URTFNR00zT1dKaklpd2ljWFZ2ZEdWSlpDSTZJbVpsTVRBeE9HWmpMVEE0WldNdE5HSXlOeTA1WTJJMExUYzNOamt4TlRCak56bGlZeUlzSW5CaGVXVmxJanA3SW5CaGNuUjVTV1JKYm1adklqcDdJbkJoY25SNVNXUlVlWEJsSWpvaVRWTkpVMFJPSWl3aWNHRnlkSGxKWkdWdWRHbG1hV1Z5SWpvaWUzdHlaV05sYVhabGNrMVRTVk5FVG4xOUlpd2labk53U1dRaU9pSndZWGxsWldaemNDSjlmU3dpY0dGNVpYSWlPbnNpY0dGeWRIbEpaRWx1Wm04aU9uc2ljR0Z5ZEhsSlpGUjVjR1VpT2lKTlUwbFRSRTRpTENKd1lYSjBlVWxrWlc1MGFXWnBaWElpT2lJeU56Y3hNemd3TXprd05TSXNJbVp6Y0Vsa0lqb2ljR0Y1WlhKbWMzQWlmU3dpY0dWeWMyOXVZV3hKYm1adklqcDdJbU52YlhCc1pYaE9ZVzFsSWpwN0ltWnBjbk4wVG1GdFpTSTZJazFoZEhNaUxDSnNZWE4wVG1GdFpTSTZJa2hoWjIxaGJpSjlMQ0prWVhSbFQyWkNhWEowYUNJNklqRTVPRE10TVRBdE1qVWlmWDBzSW1GdGIzVnVkQ0k2ZXlKaGJXOTFiblFpT2lJeE1EQWlMQ0pqZFhKeVpXNWplU0k2SWxWVFJDSjlMQ0owY21GdWMyRmpkR2x2YmxSNWNHVWlPbnNpYzJObGJtRnlhVzhpT2lKVVVrRk9VMFpGVWlJc0ltbHVhWFJwWVhSdmNpSTZJbEJCV1VWU0lpd2lhVzVwZEdsaGRHOXlWSGx3WlNJNklrTlBUbE5WVFVWU0luMTkA",
    "invalidFulfillment": "_3cco-YN5OGpRKVWV3n6x6uNpBTH9tYUdOYmHA-----",
    "note": "test",
    "payeeIdType": "MSISDN",
    "payeeIdentifier": "22556999125",
    "payeefsp": "payeefsp",
    "payerIdType": "MSISDN",
    "payerIdentifier": "22507008181",
    "payerfsp": "testingtoolkitdfsp",
    "toFspId": "payeefsp",
    "toIdType": "MSISDN",
    "toIdValue": "27713803912",
    "validCondition": "GRzLaTP7DJ9t4P-a_BA0WA9wzzlsugf00-Tn6kESAfM",
    "validCondition2": "kPLCKM62VY2jbekuw3apCTBg5zk_mVs9DD8-XpljQms",
    "validFulfillment": "UNlJ98hZTY_dsw0cAqw4i_UN3v4utt7CZFB4yfLbVFA",
    "validIlpPacket2": "AYIC9AAAAAAAABdwHWcucGF5ZWVmc3AubXNpc2RuLjIyNTU2OTk5MTI1ggLKZXlKMGNtRnVjMkZqZEdsdmJrbGtJam9pWmpRMFltUmtOV010WXpreE1DMDBZVGt3TFRoa05qa3RaR0ppWVRaaVl6aGxZVFpqSWl3aWNYVnZkR1ZKWkNJNklqVTBaRFZtTURsaUxXRTBOMlF0TkRCa05pMWhZVEEzTFdFNVkyWXpZbUl5TkRsaFpDSXNJbkJoZVdWbElqcDdJbkJoY25SNVNXUkpibVp2SWpwN0luQmhjblI1U1dSVWVYQmxJam9pVFZOSlUwUk9JaXdpY0dGeWRIbEpaR1Z1ZEdsbWFXVnlJam9pTWpJMU5UWTVPVGt4TWpVaUxDSm1jM0JKWkNJNkluQmhlV1ZsWm5Od0luMTlMQ0p3WVhsbGNpSTZleUp3WVhKMGVVbGtTVzVtYnlJNmV5SndZWEowZVVsa1ZIbHdaU0k2SWsxVFNWTkVUaUlzSW5CaGNuUjVTV1JsYm5ScFptbGxjaUk2SWpJeU5UQTNNREE0TVRneElpd2labk53U1dRaU9pSndZWGxsY21aemNDSjlMQ0p3WlhKemIyNWhiRWx1Wm04aU9uc2lZMjl0Y0d4bGVFNWhiV1VpT25zaVptbHljM1JPWVcxbElqb2lUV0YwY3lJc0lteGhjM1JPWVcxbElqb2lTR0ZuYldGdUluMHNJbVJoZEdWUFprSnBjblJvSWpvaU1UazRNeTB4TUMweU5TSjlmU3dpWVcxdmRXNTBJanA3SW1GdGIzVnVkQ0k2SWpZd0lpd2lZM1Z5Y21WdVkza2lPaUpWVTBRaWZTd2lkSEpoYm5OaFkzUnBiMjVVZVhCbElqcDdJbk5qWlc1aGNtbHZJam9pVkZKQlRsTkdSVklpTENKcGJtbDBhV0YwYjNJaU9pSlFRVmxGVWlJc0ltbHVhWFJwWVhSdmNsUjVjR1VpT2lKRFQwNVRWVTFGVWlKOWZRAA",
    "acceptParticipants": "application/vnd.interoperability.participants+json;version=1.0",
    "contentTypeParticipants": "application/vnd.interoperability.participants+json;version=1.0",
    "toIdValueDelete": "27713803913",
    "batchToIdValue1": "27713803066",
    "batchToIdValue2": "27713803067",
    "invalidToIdType": "ACCOUNT_ID"
  },
  "test_cases": [
    {
      "id": 12,
      "name": "Create Participants Batch - Happy Path - [seq-acct-lookup-post-participants-batch-7.1.1]",
      "requests": [
        {
          "id": 1,
          "description": "Create Participants Batch",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/participants",
          "path": "/participants",
          "method": "post",
          "url": "{$inputs.HOST_ACCOUNT_LOOKUP_SERVICE}",
          "headers": {
            "Accept": "{$inputs.acceptParticipants}",
            "Content-Type": "{$inputs.contentTypeParticipants}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "body": {
            "requestId": "{$function.generic.generateUUID}",
            "partyList": [
              {
                "partyIdType": "{$inputs.toIdType}",
                "partyIdentifier": "{$inputs.batchToIdValue1}",
                "fspId": "{$inputs.fromFspId}"
              },
              {
                "partyIdType": "{$inputs.toIdType}",
                "partyIdentifier": "{$inputs.batchToIdValue2}",
                "fspId": "{$inputs.fromFspId}"
              }
            ],
            "currency": "{$inputs.currency}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Response statusText be OK",
                "exec": [
                  "expect(response.statusText).to.equal('OK')"
                ]
              },
              {
                "id": 3,
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(callback.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": 4,
                "description": "Callback body should contain partyList",
                "exec": [
                  "expect(callback.body).to.have.property('partyList')"
                ]
              },
              {
                "id": 5,
                "description": "Callback body should contain currency",
                "exec": [
                  "expect(callback.body).to.have.property('currency')"
                ]
              },
              {
                "id": 6,
                "description": "Request FSPIOP-Source same as inputs fromFspId",
                "exec": [
                  "expect('{$request.headers['FSPIOP-Source']}').to.equal('{$inputs.fromFspId}')"
                ]
              },
              {
                "id": 7,
                "description": "Callback content-type to be participants",
                "exec": [
                  "expect(callback.headers['content-type']).to.equal('application/vnd.interoperability.participants+json;version={$inputs.expectedParticipantsVersion}')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "\r",
                "const curDate = (new Date()).toUTCString()\r",
                "\r",
                "\r",
                ""
              ]
            },
            "postRequest": {
              "exec": [
                ""
              ]
            }
          }
        },
        {
          "id": 2,
          "description": "Get Participants Details",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/participants/{Type}/{ID}",
          "path": "/participants/MSISDN/{$inputs.batchToIdValue1}",
          "method": "get",
          "params": {
            "Type": "MSISDN",
            "ID": "{$inputs.batchToIdValue1}"
          },
          "url": "{$inputs.HOST_ACCOUNT_LOOKUP_SERVICE}",
          "headers": {
            "Accept": "{$inputs.acceptParticipants}",
            "Content-Type": "{$inputs.contentTypeParticipants}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": 2,
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": 3,
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(callback.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": 4,
                "description": "Callback body should contain fspId",
                "exec": [
                  "expect(callback.body).to.have.property('fspId')"
                ]
              },
              {
                "id": 5,
                "description": "Callback fspId should be same as fspiop-source",
                "exec": [
                  "expect(callback.body.fspId).to.equal('{$inputs.fromFspId}')"
                ]
              },
              {
                "id": 6,
                "description": "Callback content-type to be participants",
                "exec": [
                  "expect(callback.headers['content-type']).to.equal('application/vnd.interoperability.participants+json;version={$inputs.expectedParticipantsVersion}')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "const curDate = (new Date()).toUTCString()\r",
                ""
              ]
            }
          }
        },
        {
          "id": 3,
          "description": "Get Participant Details second party",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/participants/{Type}/{ID}",
          "path": "/participants/MSISDN/{$inputs.batchToIdValue2}",
          "method": "get",
          "params": {
            "Type": "MSISDN",
            "ID": "{$inputs.batchToIdValue2}"
          },
          "url": "{$inputs.HOST_ACCOUNT_LOOKUP_SERVICE}",
          "headers": {
            "Accept": "{$inputs.acceptParticipants}",
            "Content-Type": "{$inputs.contentTypeParticipants}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": 2,
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": 3,
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(callback.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": 4,
                "description": "Callback body should contain fspId",
                "exec": [
                  "expect(callback.body).to.have.property('fspId')"
                ]
              },
              {
                "id": 5,
                "description": "Callback fspId should be same as fspiop-source",
                "exec": [
                  "expect(callback.body.fspId).to.equal('{$inputs.fromFspId}')"
                ]
              },
              {
                "id": 6,
                "description": "Callback content-type to be participants",
                "exec": [
                  "expect(callback.headers['content-type']).to.equal('application/vnd.interoperability.participants+json;version={$inputs.expectedParticipantsVersion}')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "const curDate = (new Date()).toUTCString()\r",
                ""
              ]
            }
          }
        }
      ]
    },
    {
      "id": 13,
      "name": "Delete Added Participant Details - [seq-acct-lookup-del-participants-7.1.2]",
      "requests": [
        {
          "id": 1,
          "description": "Delete Participant Details - Happy Path - [seq-acct-lookup-del-participants-7.1.2]",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/participants/{Type}/{ID}",
          "path": "/participants/MSISDN/{$inputs.batchToIdValue1}",
          "method": "delete",
          "params": {
            "Type": "MSISDN",
            "ID": "{$inputs.batchToIdValue1}"
          },
          "url": "{$inputs.HOST_ACCOUNT_LOOKUP_SERVICE}",
          "headers": {
            "Accept": "{$inputs.acceptParticipants}",
            "Content-Type": "{$inputs.contentTypeParticipants}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": 2,
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": 3,
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(callback.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": 4,
                "description": "Callback body should contain fspId",
                "exec": [
                  "expect(callback.body).to.have.property('fspId')"
                ]
              },
              {
                "id": 6,
                "description": "Request FSPIOP-Source same as inputs fromFspId",
                "exec": [
                  "expect('{$request.headers['FSPIOP-Source']}').to.equal('{$inputs.fromFspId}')"
                ]
              },
              {
                "id": 7,
                "description": "Callback content-type to be participants",
                "exec": [
                  "expect(callback.headers['content-type']).to.equal('application/vnd.interoperability.participants+json;version={$inputs.expectedParticipantsVersion}')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "const curDate = (new Date()).toUTCString()\r",
                ""
              ]
            }
          }
        },
        {
          "id": 2,
          "description": "Delete Second Participant - Happy Path - [seq-acct-lookup-del-participants-7.1.2]",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/participants/{Type}/{ID}",
          "path": "/participants/MSISDN/{$inputs.batchToIdValue2}",
          "method": "delete",
          "params": {
            "Type": "MSISDN",
            "ID": "{$inputs.batchToIdValue2}"
          },
          "url": "{$inputs.HOST_ACCOUNT_LOOKUP_SERVICE}",
          "headers": {
            "Accept": "{$inputs.acceptParticipants}",
            "Content-Type": "{$inputs.contentTypeParticipants}",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Date": "{$function.generic.curDate}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": 2,
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": 3,
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(callback.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": 4,
                "description": "Callback body should contain fspId",
                "exec": [
                  "expect(callback.body).to.have.property('fspId')"
                ]
              },
              {
                "id": 6,
                "description": "Request FSPIOP-Source same as inputs fromFspId",
                "exec": [
                  "expect('{$request.headers['FSPIOP-Source']}').to.equal('{$inputs.fromFspId}')"
                ]
              },
              {
                "id": 7,
                "description": "Callback content-type to be participants",
                "exec": [
                  "expect(callback.headers['content-type']).to.equal('application/vnd.interoperability.participants+json;version={$inputs.expectedParticipantsVersion}')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "const curDate = (new Date()).toUTCString()\r",
                ""
              ]
            }
          }
        }
      ]
    },
    {
      "id": 14,
      "name": "Create Participants Batch - Error Invalid IdType - [seq-acct-lookup-post-participants-batch-7.1.1]",
      "requests": [
        {
          "id": 2,
          "description": "Get Participants Details",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/participants/{Type}/{ID}",
          "path": "/participants/MSISDN/{$inputs.batchToIdValue1}",
          "method": "get",
          "params": {
            "Type": "MSISDN",
            "ID": "{$inputs.batchToIdValue1}"
          },
          "url": "{$inputs.HOST_ACCOUNT_LOOKUP_SERVICE}",
          "headers": {
            "Accept": "{$inputs.acceptParticipants}",
            "Content-Type": "{$inputs.contentTypeParticipants}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": 2,
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": 3,
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(callback.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": 4,
                "description": "Callback body should contain errorInformation",
                "exec": [
                  "expect(callback.body).to.have.property('errorInformation')"
                ]
              },
              {
                "id": 5,
                "description": "Callback content-type to be participants",
                "exec": [
                  "expect(callback.headers['content-type']).to.equal('application/vnd.interoperability.participants+json;version={$inputs.expectedParticipantsVersion}')"
                ]
              },
              {
                "id": 6,
                "description": "Callback body should contain errorCode and errorDescription",
                "exec": [
                  "expect(callback.body.errorInformation.errorCode).to.equal('3204')",
                  "expect(callback.body.errorInformation.errorDescription).to.equal('Party not found')"
                ]
              },
              {
                "id": 7,
                "description": "Callback FSPIOP-Destination same as request FSPIOP-Source",
                "exec": [
                  "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "const curDate = (new Date()).toUTCString()\r",
                ""
              ]
            }
          }
        },
        {
          "id": 3,
          "description": "Get Participant Details second party",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/participants/{Type}/{ID}",
          "path": "/participants/MSISDN/{$inputs.batchToIdValue2}",
          "method": "get",
          "params": {
            "Type": "MSISDN",
            "ID": "{$inputs.batchToIdValue2}"
          },
          "url": "{$inputs.HOST_ACCOUNT_LOOKUP_SERVICE}",
          "headers": {
            "Accept": "{$inputs.acceptParticipants}",
            "Content-Type": "{$inputs.contentTypeParticipants}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": 2,
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": 3,
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(callback.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": 4,
                "description": "Callback body should contain errorInformation",
                "exec": [
                  "expect(callback.body).to.have.property('errorInformation')"
                ]
              },
              {
                "id": 5,
                "description": "Callback content-type to be participants",
                "exec": [
                  "expect(callback.headers['content-type']).to.equal('application/vnd.interoperability.participants+json;version={$inputs.expectedParticipantsVersion}')"
                ]
              },
              {
                "id": 6,
                "description": "Callback body should contain errorCode and errorDescription",
                "exec": [
                  "expect(callback.body.errorInformation.errorCode).to.equal('3204')",
                  "expect(callback.body.errorInformation.errorDescription).to.equal('Party not found')"
                ]
              },
              {
                "id": 7,
                "description": "Callback FSPIOP-Destination same as request FSPIOP-Source",
                "exec": [
                  "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "const curDate = (new Date()).toUTCString()\r",
                ""
              ]
            }
          }
        }
      ]
    }
  ]
}